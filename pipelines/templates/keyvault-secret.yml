parameters:
- name: azureSvcName
  type: string
- name: aadObjectidSvc
  type: string
- name: PipelineSecrets
  type: object
  default: []

stages:
- stage: KeyVault
  jobs:
  - ${{ each PipelineSecret in parameters.PipelineSecrets }}:
    - job: ${{ PipelineSecret.value.name }}
      pool:
        vmImage: windows-latest
      variables:
      - template: ./variables.yml
      - name: SecretVariableName
        value: ${{ PipelineSecret.value.name }}
      steps:
      - task: AzurePowerShell@5
        name: ${{ PipelineSecret.value.name }}
        displayName: Set ${{ PipelineSecret.value.name }} variable
        env:
          SecretValue: ${{ PipelineSecret.value.secret }}
        inputs:
          azureSubscription: ${{ parameters.azureSvcName }}
          azurePowerShellVersion: latestVersion
          pwsh: true
          ScriptType: InlineScript
          Inline: |
            if ( '${{ PipelineSecret.value.secret }}' -like '*${{ PipelineSecret.value.name }}*' ){
              Set-AzKeyVaultAccessPolicy -VaultName $env:KEYVAULT_NAME -PermissionsToSecrets get,set -ObjectId ${{ parameters.aadObjectidSvc }}
              $secretValue = Get-AzKeyVaultSecret -VaultName $env:KEYVAULT_NAME -Name '${{ PipelineSecret.value.kvsecretname }}' -AsPlainText
              Write-Host "##vso[task.setvariable variable=$env:SecretVariableName;issecret=true;isOutput=true]$secretValue"
              Write-Host "Input variable $env:SecretVariableName does not exists. $secretValue is set for the later stage."
            }
            else{
              Write-Host "##vso[task.setvariable variable=$env:SecretVariableName;issecret=true;isOutput=true]'${{ PipelineSecret.value.secret }}'"
              Write-Host "Input variable $env:SecretVariableName already exists. Use this variable for the later stage."
            }